# You can define environments within GitHub for better management of approvals:
#Go to your repositoryâ€™s Settings > Environments.
# Add environments such as dev, staging, and prod.
# For each environment, you can require manual approval before the job runs, linking to the steps in the workflow.


name: Terraform Workflow

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_S3_TF_BUCKET: "lessandro-tf-state-file"
  AWS_S3_TF_KEY_BUCKET: "devops-automation-project"
  AWS_S3_TF_BUCKET_REGION: "region=us-east-1"

jobs:
  terraform-plan:
    runs-on: ubuntu-latest

    steps:
      # This step checks out the code from the GitHub repository so that Terraform can access it.
      - name: Checkout code
        uses: actions/checkout@v3

      # This sets up Terraform using the hashicorp/setup-terraform action.
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.5

      # This step caches the Terraform provider plugins to speed up the pipeline by avoiding downloading the plugins on each run.
      - name: Cache Terraform providers
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugins
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      # This checks if the current branch is main. If it is the main branch, the script will select the prd workspace. For all other branches (like dev or feature branches), it will select the dev workspace
      - name: Select the environment workspace
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            export ENV="prod"
          elif [[ "${GITHUB_REF}" == "refs/heads/staging" ]]; then
            export ENV="staging"
          else
            export ENV="dev"
          fi
          echo "Selected environment: $ENV"
          echo "env=$ENV" >> $GITHUB_ENV

      # Ensure we're in the correct environment directory and initialize the backend
      - name: Initialize Terraform for selected environment
        working-directory: infra/terraform/env/${{ env.env }}
        run: |
          terraform init \
            -backend-config="${{ AWS_S3_TF_BUCKET }}" \
            -backend-config="key=${{ AWS_S3_TF_KEY_BUCKET }}/${{ env.env }}/terraform.tfstate" \
            -backend-config="${{ AWS_S3_TF_BUCKET_REGION }}"

      # Select or create the Terraform workspace for the environment

      - name: Terraform Plan for ${{ env.env }}
        working-directory: infra/terraform/env/${{ env.env }}
        run: |
          terraform workspace select -or-create ${{ env.env }}
          terraform plan -out=tfplan

      # Optionally uploads the plan to GitHub artifacts so that it can be downloaded or reviewed.
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: infra/terraform/env/${{ env.env }}/tfplan


  terrafom-apply:
    runs-on: ubuntu-latest
    needs: terraform-plan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: infra/terraform/env/${{ env.env }}

      # Terraform Apply (executed after manual approval)
      - name: Terraform Apply for ${{ env.env }}
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: infra/terraform/env/${{ env.env }}
        run: terraform apply -auto-approve tfplan